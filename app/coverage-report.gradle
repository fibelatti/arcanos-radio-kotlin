apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/*$InjectAdapter*.*',
                      '**/*Injector*.*',
                      '**/*Module.*',
                      '**/*Component.*',
                      '**/*Injector*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Activity*.*',
                      '**/*Fragment*.*',
                      '**/*Adapter.*',
                      '**/*ViewHolder*.*',
                      '**/*Layout.*',
                      '**/*View.*',
                      '**/*EditText.*',
                      '**/*Entity.*',
                      '**/*Dto.*',
                      '**/*Errors.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task copyTestClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debug"
    into "build/intermediates/classes/debug"
}
